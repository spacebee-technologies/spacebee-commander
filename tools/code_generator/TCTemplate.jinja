# telecommand_template.jinja

from telecommand_interface import TelecommandInterface, struct
{% if return_type %}
    {%- if return_name == 'timestamp' -%}
from datetime import timedelta
    {%- endif -%}
{% endif %}


class {{ class_name }}(TelecommandInterface):
    {% if arguments -%}
        {% for argument in arguments %}
            {%- if argument['type'] == 'enum' %}
    enum_map_{{ argument['name'] }} = {
        {%- for value in argument['values'] -%}
        {{ loop.index0 }}: "{{ value }}"{% if not loop.last %},{% endif %}
        {%- endfor -%}
    }
            {%- endif -%}
        {%- endfor -%}
    {% endif %}

    def __init__(self):
        self.name = "{{ telecommand_name }}"
        {%- if arguments -%}
            {%- for argument in arguments -%}
                {% if argument['type'] == 'enum' %}
        self.help = "{{ telecommand_name }}: input args= {{ argument['name'] }}: {%- for value in argument['values'] -%} {{ loop.index0 }}:{{ value }}{% if not loop.last %}, {% endif %}{%- endfor -%}"
        self.help_input = "{{ argument['name'] }} = {%- for value in argument['values'] -%} {{ loop.index0 }}:{{ value }}{% if not loop.last %}, {% endif %}{%- endfor -%}"
                {%- else %}
        self.help = "{{ telecommand_name }}"
        self.help_input = "{{ argument['name'] }}=({{ argument['type'] }})"
                {%- endif %}
            {%- endfor -%}
        {%- else %}
        self.help = "{{ telecommand_name }}"
        self.help_input = "None"
        {%- endif %}
        self.operation = {{ operation_id }}
        self.area_version = 0
        self.num_inputs = {{ num_inputs }}

    def loadInputArguments(self, arg):
{%- if arguments -%}
{% for arg in arguments %}
    {%- if arg['type'] == 'float' %}
        arg = float(arg)
        self.body = struct.pack('f', arg)
        self.body_length = len(self.body)
    {%- elif arg['type'] == 'uint16_t'%}
        self.body = arg.to_bytes(2, 'little')
        self.body_length = len(self.body)
    {%- elif arg['type'] == 'enum' %}
        arg = int(arg)
        if arg not in self.enum_map_{{ arg['name'] }}:
            raise ValueError(f"Invalid input for {{ arg['name'] }}")
        self.body = arg.to_bytes(max((arg.bit_length() + 7) // 8, 1), 'little')
        self.body_length = len(self.body)
    {%- endif -%}
{% endfor %}
{% else %}
        self.body = bytes()
        self.body_length = 0
{% endif %}


    def parseOutputArguments(self, response):
{%- if return_type %}
        response_dict = {}
    {%- if return_type == 'uint32_t' %}
        response_int = int.from_bytes(response, 'little')
    {%- if return_name == 'timestamp' %}
        timestamp = timedelta(milliseconds=response_int)
        response_dict['Date'] = str(timestamp)
    {% endif %}
    {%- elif return_type == 'string' %}
        response_dict['{{ return_name }}'] = response.decode('utf-8').strip()
    {% endif %}
        return response_dict
{% else %}
        print("No output arguments!")
        return None
{% endif %}
